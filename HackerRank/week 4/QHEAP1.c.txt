#include <stdio.h>

#define MAXQ 100000

long heap[MAXQ + 5];
int heapSize = 0;


void swap(long *a, long *b) {
    long t = *a; *a = *b; *b = t;
}

void heapifyUp(int i) {
    while (i > 0) {
        int parent = (i - 1) / 2;
        if (heap[parent] > heap[i]) {
            swap(&heap[parent], &heap[i]);
            i = parent;
        } else break;
    }
}

void heapifyDown(int i) {
    while (1) {
        int left = 2 * i + 1, right = 2 * i + 2, smallest = i;
        if (left < heapSize && heap[left] < heap[smallest]) smallest = left;
        if (right < heapSize && heap[right] < heap[smallest]) smallest = right;
        if (smallest != i) {
            swap(&heap[i], &heap[smallest]);
            i = smallest;
        } else break;
    }
}

void insertHeap(long x) {
    heap[heapSize] = x;
    heapifyUp(heapSize);
    heapSize++;
}


int findIndex(long x) {
    for (int i = 0; i < heapSize; i++) {
        if (heap[i] == x) return i;
    }
    return -1; 

void deleteHeap(long x) {
    int idx = findIndex(x);
    if (idx == -1) return;
    heap[idx] = heap[--heapSize];     heapifyUp(idx);
    heapifyDown(idx);
}


long getMin() {
    return heap[0];
}

int main() {
    int Q;
    scanf("%d", &Q);
    while (Q--) {
        int type;
        scanf("%d", &type);
        if (type == 1) {
            long v; scanf("%ld", &v);
            insertHeap(v);
        } else if (type == 2) {
            long v; scanf("%ld", &v);
            deleteHeap(v);
        } else if (type == 3) {
            printf("%ld\n", getMin());
        }
    }
    return 0;
}